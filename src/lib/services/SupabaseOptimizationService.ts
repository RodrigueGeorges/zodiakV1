import { supabase } from '../supabase';
import { StorageService } from '../storage';
import { Analytics } from '../monitoring/Analytics';
import type { Profile, DailyGuidance } from '../types/supabase';
import { DateTime } from 'luxon';

export class SupabaseOptimizationService {
  private static readonly CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 heures
  private static readonly BATCH_SIZE = 10; // Nombre d'√©l√©ments par batch

  /**
   * R√©cup√®re le profil utilisateur avec optimisation cache
   */
  static async getProfileOptimized(userId: string): Promise<Profile | null> {
    try {
      console.log('üîç Recherche optimis√©e du profil...');
      
      // 1. V√©rifier le cache local d'abord
      const cachedProfile = await StorageService.getProfile(userId);
      if (cachedProfile) {
        console.log('‚úÖ Profil trouv√© en cache local');
        return cachedProfile;
      }

      // 2. R√©cup√©rer depuis Supabase
      console.log('üîÑ R√©cup√©ration depuis Supabase...');
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .maybeSingle();

      if (error) throw error;
      if (!data) return null;

      // 3. Mettre en cache
      await StorageService.saveProfile(data);
      console.log('üíæ Profil mis en cache');
      
      return data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration du profil:', error);
      Analytics.trackError(error instanceof Error ? error : new Error('Profile fetch failed'));
      return null;
    }
  }

  /**
   * R√©cup√®re la guidance quotidienne avec optimisation
   */
  static async getDailyGuidanceOptimized(userId: string, date: string): Promise<DailyGuidance | null> {
    try {
      console.log('üîç Recherche optimis√©e de la guidance...');
      
      // 1. V√©rifier le cache local d'abord
      const cachedGuidance = await StorageService.getDailyGuidance(userId, date);
      if (cachedGuidance) {
        console.log('‚úÖ Guidance trouv√©e en cache local');
        return cachedGuidance;
      }

      // 2. V√©rifier si la guidance existe dans Supabase
      const guidanceExists = await StorageService.checkGuidanceExists(userId, date);
      if (!guidanceExists) {
        console.log('‚ö†Ô∏è Aucune guidance trouv√©e pour cette date');
        return null;
      }

      // 3. R√©cup√©rer depuis Supabase
      console.log('üîÑ R√©cup√©ration depuis Supabase...');
      const { data, error } = await supabase
        .from('daily_guidance')
        .select('*')
        .eq('user_id', userId)
        .eq('date', date)
        .maybeSingle();

      if (error) throw error;
      if (!data) return null;

      // 4. Mettre en cache
      await StorageService.saveDailyGuidance(data);
      console.log('üíæ Guidance mise en cache');
      
      return data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de la guidance:', error);
      Analytics.trackError(error instanceof Error ? error : new Error('Guidance fetch failed'));
      return null;
    }
  }

  /**
   * R√©cup√®re l'historique des guidances avec optimisation
   */
  static async getGuidanceHistoryOptimized(userId: string, limit: number = 7): Promise<DailyGuidance[]> {
    try {
      console.log('üîç R√©cup√©ration optimis√©e de l\'historique...');
      
      // 1. Calculer les dates √† r√©cup√©rer
      const dates = [];
      for (let i = 0; i < limit; i++) {
        const date = DateTime.now().minus({ days: i }).toISODate();
        dates.push(date);
      }

      // 2. R√©cup√©rer en batch depuis Supabase
      const { data, error } = await supabase
        .from('daily_guidance')
        .select('*')
        .eq('user_id', userId)
        .in('date', dates)
        .order('date', { ascending: false })
        .limit(limit);

      if (error) throw error;
      if (!data) return [];

      // 3. Mettre en cache chaque guidance
      for (const guidance of data) {
        await StorageService.saveDailyGuidance(guidance);
      }

      console.log(`‚úÖ ${data.length} guidances d'historique r√©cup√©r√©es et mises en cache`);
      return data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de l\'historique:', error);
      return [];
    }
  }

  /**
   * Sauvegarde optimis√©e avec v√©rification de doublons
   */
  static async saveGuidanceOptimized(guidance: DailyGuidance): Promise<boolean> {
    try {
      console.log('üíæ Sauvegarde optimis√©e de la guidance...');
      
      // 1. V√©rifier si la guidance existe d√©j√†
      const exists = await StorageService.checkGuidanceExists(guidance.user_id, guidance.date);
      if (exists) {
        console.log('‚ö†Ô∏è Guidance d√©j√† existante, mise √† jour...');
      }

      // 2. Sauvegarder dans Supabase
      const { error } = await supabase
        .from('daily_guidance')
        .upsert(guidance, {
          onConflict: 'user_id,date'
        });

      if (error) throw error;

      // 3. Mettre en cache
      await StorageService.saveDailyGuidance(guidance);
      console.log('‚úÖ Guidance sauvegard√©e et mise en cache');

      Analytics.trackEvent('guidance', {
        action: 'save_optimized',
        userId: guidance.user_id,
        date: guidance.date
      });

      return true;
    } catch (error) {
      console.error('Erreur lors de la sauvegarde optimis√©e:', error);
      Analytics.trackError(error instanceof Error ? error : new Error('Guidance save failed'));
      return false;
    }
  }

  /**
   * Mise √† jour optimis√©e du profil
   */
  static async updateProfileOptimized(profile: Profile): Promise<boolean> {
    try {
      console.log('üíæ Mise √† jour optimis√©e du profil...');
      
      // 1. Sauvegarder dans Supabase
      const { error } = await supabase
        .from('profiles')
        .upsert(profile, {
          onConflict: 'id'
        });

      if (error) throw error;

      // 2. Mettre en cache
      await StorageService.saveProfile(profile);
      console.log('‚úÖ Profil mis √† jour et mis en cache');

      Analytics.trackEvent('profile', {
        action: 'update_optimized',
        userId: profile.id
      });

      return true;
    } catch (error) {
      console.error('Erreur lors de la mise √† jour du profil:', error);
      Analytics.trackError(error instanceof Error ? error : new Error('Profile update failed'));
      return false;
    }
  }

  /**
   * Pr√©chargement intelligent des donn√©es
   */
  static async preloadUserData(userId: string): Promise<void> {
    try {
      console.log('üöÄ Pr√©chargement intelligent des donn√©es...');
      
      // 1. Pr√©charger le profil
      await this.getProfileOptimized(userId);
      
      // 2. Pr√©charger la guidance d'aujourd'hui
      const today = DateTime.now().toISODate();
      await this.getDailyGuidanceOptimized(userId, today);
      
      // 3. Pr√©charger l'historique r√©cent
      await this.getGuidanceHistoryOptimized(userId, 3);
      
      console.log('‚úÖ Pr√©chargement termin√©');
    } catch (error) {
      console.error('Erreur lors du pr√©chargement:', error);
    }
  }

  /**
   * Nettoyage du cache expir√©
   */
  static async cleanupExpiredCache(): Promise<void> {
    try {
      console.log('üßπ Nettoyage du cache expir√©...');
      
      // Vider le cache local
      StorageService.clearCache();
      
      console.log('‚úÖ Cache nettoy√©');
    } catch (error) {
      console.error('Erreur lors du nettoyage du cache:', error);
    }
  }

  /**
   * Statistiques d'optimisation
   */
  static getOptimizationStats(): {
    cacheHits: number;
    cacheMisses: number;
    apiCalls: number;
  } {
    // Ces statistiques peuvent √™tre √©tendues pour suivre les performances
    return {
      cacheHits: 0,
      cacheMisses: 0,
      apiCalls: 0
    };
  }
} 