// Script de test pour v√©rifier le syst√®me de guidance quotidienne
// Usage: node test-daily-guidance.js

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabase = createClient(
  process.env.SUPABASE_URL || 'https://your-project.supabase.co',
  process.env.SUPABASE_ANON_KEY || 'your-anon-key'
);

async function testDailyGuidanceSystem() {
  console.log('üß™ Test du syst√®me de guidance quotidienne...\n');

  try {
    // 1. V√©rifier les utilisateurs avec SMS activ√©
    console.log('1Ô∏è‚É£ R√©cup√©ration des utilisateurs avec SMS activ√©...');
    const { data: profiles, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('daily_guidance_sms_enabled', true)
      .in('subscription_status', ['active', 'trial']);

    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des profils:', error);
      return;
    }

    console.log(`‚úÖ ${profiles?.length || 0} utilisateurs trouv√©s avec SMS activ√©\n`);

    if (!profiles || profiles.length === 0) {
      console.log('‚ÑπÔ∏è Aucun utilisateur √† tester');
      return;
    }

    // 2. Analyser chaque utilisateur
    console.log('2Ô∏è‚É£ Analyse des profils utilisateurs...');
    for (const profile of profiles) {
      console.log(`\nüë§ Utilisateur: ${profile.name} (${profile.id})`);
      console.log(`   üì± T√©l√©phone: ${profile.phone || '‚ùå Manquant'}`);
      console.log(`   ‚è∞ Heure de guidance: ${profile.guidance_sms_time || '08:00'}`);
      console.log(`   üìä Statut: ${profile.subscription_status}`);
      console.log(`   üéØ Th√®me natal: ${profile.natal_chart ? '‚úÖ Pr√©sent' : '‚ùå Manquant'}`);
      console.log(`   üìÖ Derni√®re guidance: ${profile.last_guidance_sent || 'Jamais'}`);
      
      // V√©rifier les probl√®mes
      const issues = [];
      if (!profile.phone) issues.push('Num√©ro de t√©l√©phone manquant');
      if (!profile.natal_chart) issues.push('Th√®me natal manquant');
      if (profile.subscription_status === 'expired') issues.push('Abonnement expir√©');
      
      if (issues.length > 0) {
        console.log(`   ‚ö†Ô∏è Probl√®mes d√©tect√©s: ${issues.join(', ')}`);
      } else {
        console.log(`   ‚úÖ Profil valide pour les SMS`);
      }
    }

    // 3. V√©rifier les guidances existantes
    console.log('\n3Ô∏è‚É£ V√©rification des guidances existantes...');
    const today = new Date().toISOString().slice(0, 10);
    
    for (const profile of profiles) {
      const { data: guidance, error: guidanceError } = await supabase
        .from('daily_guidance')
        .select('*')
        .eq('user_id', profile.id)
        .eq('date', today)
        .maybeSingle();

      if (guidanceError) {
        console.log(`‚ùå Erreur pour ${profile.name}: ${guidanceError.message}`);
      } else if (guidance) {
        console.log(`‚úÖ ${profile.name}: Guidance du jour pr√©sente`);
      } else {
        console.log(`‚ö†Ô∏è ${profile.name}: Aucune guidance pour aujourd'hui`);
      }
    }

    // 4. Test de la fonction Netlify
    console.log('\n4Ô∏è‚É£ Test de la fonction Netlify...');
    try {
      const response = await fetch(`${process.env.URL || 'https://zodiak.netlify.app'}/.netlify/functions/send-daily-guidance`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      const result = await response.json();
      
      if (response.ok) {
        console.log('‚úÖ Fonction Netlify accessible');
        console.log(`   üìä R√©sultat: ${JSON.stringify(result, null, 2)}`);
      } else {
        console.log('‚ùå Erreur de la fonction Netlify:', result);
      }
    } catch (netlifyError) {
      console.log('‚ùå Impossible d\'acc√©der √† la fonction Netlify:', netlifyError.message);
    }

    // 5. Recommandations
    console.log('\n5Ô∏è‚É£ Recommandations:');
    
    const usersWithoutPhone = profiles.filter(p => !p.phone).length;
    const usersWithoutNatalChart = profiles.filter(p => !p.natal_chart).length;
    const expiredUsers = profiles.filter(p => p.subscription_status === 'expired').length;
    
    if (usersWithoutPhone > 0) {
      console.log(`‚ö†Ô∏è ${usersWithoutPhone} utilisateurs sans num√©ro de t√©l√©phone`);
    }
    
    if (usersWithoutNatalChart > 0) {
      console.log(`‚ö†Ô∏è ${usersWithoutNatalChart} utilisateurs sans th√®me natal`);
    }
    
    if (expiredUsers > 0) {
      console.log(`‚ö†Ô∏è ${expiredUsers} utilisateurs avec abonnement expir√©`);
    }
    
    const validUsers = profiles.filter(p => p.phone && p.natal_chart && p.subscription_status !== 'expired').length;
    console.log(`‚úÖ ${validUsers} utilisateurs pr√™ts √† recevoir des SMS`);

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Fonction pour simuler l'envoi d'un SMS de test
async function sendTestSMS(phoneNumber) {
  console.log(`\nüì± Test d'envoi SMS √† ${phoneNumber}...`);
  
  try {
    const response = await fetch(`${process.env.URL || 'https://zodiak.netlify.app'}/.netlify/functions/send-sms`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        to: phoneNumber,
        text: 'üß™ Test Zodiak : Le syst√®me de guidance quotidienne fonctionne correctement !',
        from: 'Zodiak'
      })
    });

    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ SMS de test envoy√© avec succ√®s');
      console.log(`   üìã Message ID: ${result.messageId}`);
    } else {
      console.log('‚ùå Erreur lors de l\'envoi du SMS:', result);
    }
  } catch (error) {
    console.log('‚ùå Erreur de connexion:', error.message);
  }
}

// Ex√©cution du test
if (require.main === module) {
  testDailyGuidanceSystem().then(() => {
    console.log('\nüèÅ Test termin√©');
    process.exit(0);
  }).catch(error => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });
}

module.exports = { testDailyGuidanceSystem, sendTestSMS }; 